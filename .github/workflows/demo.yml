name: Demo_Work_Flow
on:
  push:
    branches: [main]

env:
  AWS_ACCESS_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_REGION: ${{ secrets.AWS_REGION }}
  ECR_REPOSITORY: nishant/my-first-docker-image
  NUM_IMAGES_TO_DELETE: 5  # Number of oldest images to delete (adjust this number as needed)

jobs:
  release:
    name: Release
    runs-on: ubuntu-latest
    steps:
      - name: Cancel Previous Runs
        uses: styfle/cancel-workflow-action@0.4.1
        with:
          access_token: ${{ github.token }}

      - name: Checkout
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@master

      - name: Build & Push Image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          RELEASE_IMAGE: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}
        run: |
          docker buildx create --use
          docker buildx build \
            --tag ${{ env.RELEASE_IMAGE }} \
            --push \
            .

      - name: Delete Oldest Docker Images from ECR
        run: |
          echo "Fetching image details from ECR..."
          
          # Fetch the image details from ECR
          images=$(aws ecr describe-images \
            --repository-name "$ECR_REPOSITORY" \
            --region "$AWS_REGION" \
            --query 'imageDetails[].[imageDigest, imageTags, imagePushedAt]' \
            --output json)

          # Check if the AWS command was successful
          if [ $? -ne 0 ]; then
            echo "Error: Failed to retrieve image details from ECR."
            exit 1
          fi

          # Debugging: Print the JSON structure to understand it
          echo "$images" | jq .

          # Use jq to sort the images by `imagePushedAt` (oldest first) and limit to the oldest X images
          old_images=$(echo "$images" | jq -r \
            --argjson num_images "$NUM_IMAGES_TO_DELETE" \
            'sort_by(.imagePushedAt) | .[:$num_images]')

          # If no old images are found, exit early
          if [[ -z "$old_images" ]]; then
            echo "No images found in the repository. Skipping deletion."
            exit 0
          fi

          echo "Deleting the oldest images from ECR..."
          
          # Loop through the old images and delete them
          for image in $(echo "$old_images" | jq -r '.imageDigest'); do
            echo "Deleting image with digest: $image"
            
            # Perform the image deletion
            aws ecr batch-delete-image \
              --repository-name "$ECR_REPOSITORY" \
              --region "$AWS_REGION" \
              --image-ids imageDigest="$image"
              
            # Check for success or failure
            if [ $? -eq 0 ]; then
              echo "Successfully deleted image with digest: $image."
            else
              echo "Failed to delete image with digest: $image."
            fi
          done

          echo "Image deletion process complete."
