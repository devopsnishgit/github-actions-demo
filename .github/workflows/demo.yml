name: Demo_Work_Flow

on:
  push:
    branches:
      - main  # Trigger on push to the main branch

env:
  AWS_ACCESS_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_REGION: ${{ secrets.AWS_REGION }}
  ECR_REPOSITORY: nishant/my-first-docker-image
  NUM_IMAGES_TO_DELETE: 5

jobs:
  release:
    name: Release
    runs-on: ubuntu-latest

    steps:
      # Cancel previous workflows (if any)
      - name: Cancel Previous Runs
        uses: styfle/cancel-workflow-action@0.4.1
        with:
          access_token: ${{ github.token }}

      # Checkout the code from the repo
      - name: Checkout
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event.pull_request.head.sha }}  

      # Configure AWS credentials for ECR login
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # Login to Amazon ECR
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      # Set up Docker Buildx
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@master

      # Build and push the Docker image to ECR
      - name: Build & Push Image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          #RELEASE_IMAGE: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}
          RELEASE_IMAGE: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.ref }}-${{ github.sha }}
        run: |
          docker buildx create --use
          docker buildx build \
            --tag ${{ env.RELEASE_IMAGE }} \
            --push \
            .

      # Fetch and delete old ECR images
      - name: Fetch and Delete Old ECR Images
        run: |
          echo "Fetching image details from ECR..."
  
          # Fetch image details from ECR
          images=$(aws ecr describe-images \
            --repository-name "$ECR_REPOSITORY" \
            --region "$AWS_REGION" \
            --query 'imageDetails[].[imageDigest, imageTags, imagePushedAt]' \
            --output json)
  
          # Check if the AWS command was successful
          if [ $? -ne 0 ]; then
            echo "Error: Failed to retrieve image details from ECR."
            exit 1
          fi
  
          # Debugging: Print the JSON structure to understand it (optional)
          echo "Image details fetched from ECR: "
          echo "$images" | jq .
  
          # Use jq to sort images by imagePushedAt (oldest first)
          old_images=$(echo "$images" | jq -r \
            --argjson num_images "$NUM_IMAGES_TO_DELETE" \
            'sort_by(.[2]) | .[:$num_images]')
  
          # If no old images are found, exit early
          if [[ -z "$old_images" ]]; then
            echo "No images found in the repository. Skipping deletion."
            exit 0
          fi
  
          echo "Deleting the oldest images from ECR..."
  
          # Loop through the old images and delete them
          for image in $(echo "$old_images" | jq -r '.[0]'); do
            # Clean up the image digest (strip unwanted characters)
            digest=$(echo "$image" | sed 's/\[//g' | sed 's/\]//g' | sed 's/"//g' | sed 's/,//g')  # Remove square brackets, quotes, and commas
  
            if [[ -n "$digest" ]]; then
              echo "Deleting image with digest: $digest"
  
              # Perform the image deletion
              aws ecr batch-delete-image \
                --repository-name "$ECR_REPOSITORY" \
                --region "$AWS_REGION" \
                --image-ids imageDigest="$digest"
  
              # Check for success or failure
              if [ $? -eq 0 ]; then
                echo "Successfully deleted image with digest: $digest."
              else
                echo "Failed to delete image with digest: $digest."
              fi
            else
              echo "Skipping invalid image digest."
            fi
          done
  
          echo "Image deletion process complete."
