name: Build and Delete Old ECR Images

on:
  push:
    branches:
      - main  # Trigger on push to the main branch

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_REGION: ${{ secrets.AWS_REGION }}
  ECR_REPOSITORY: nishant/my-first-docker-image
  NUM_IMAGES_TO_DELETE: 5
  IMAGE_TAG: latest  # You can change this tag as per your needs

jobs:
  build_and_delete_old_images:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout the code
      uses: actions/checkout@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
      with:
        version: latest

    - name: Log in to Amazon ECR
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build Docker image
      run: |
        echo "Building Docker image..."
        docker build -t "$ECR_REPOSITORY:$IMAGE_TAG" .
        docker tag "$ECR_REPOSITORY:$IMAGE_TAG" "$AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPOSITORY:$IMAGE_TAG"

    - name: Push Docker image to ECR
      run: |
        echo "Pushing Docker image to ECR..."
        docker push "$AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPOSITORY:$IMAGE_TAG"

    - name: Fetch and delete old ECR images
      run: |
        echo "Fetching image details from ECR..."

        # Fetch image details from ECR
        images=$(aws ecr describe-images \
          --repository-name "$ECR_REPOSITORY" \
          --region "$AWS_REGION" \
          --query 'imageDetails[].[imageDigest, imageTags, imagePushedAt]' \
          --output json)

        # Check if the AWS command was successful
        if [ $? -ne 0 ]; then
          echo "Error: Failed to retrieve image details from ECR."
          exit 1
        fi

        # Debugging: Print the JSON structure to understand it (optional)
        echo "Image details fetched from ECR: "
        echo "$images" | jq .

        # Use jq to sort images by `imagePushedAt` (oldest first)
        old_images=$(echo "$images" | jq -r \
          --argjson num_images "$NUM_IMAGES_TO_DELETE" \
          'sort_by(.[2]) | .[:$num_images]')

        # If no old images are found, exit early
        if [[ -z "$old_images" ]]; then
          echo "No images found in the repository. Skipping deletion."
          exit 0
        fi

        echo "Deleting the oldest images from ECR..."

        # Loop through the old images and delete them
        for image in $(echo "$old_images" | jq -r '.[0]'); do
          # Clean up the image digest (strip unwanted characters)
          digest=$(echo "$image" | sed 's/\[//g' | sed 's/\]//g' | sed 's/"//g' | sed 's/,//g')  # Remove square brackets, quotes, and commas

          if [[ -n "$digest" ]]; then
            echo "Deleting image with digest: $digest"

            # Perform the image deletion
            aws ecr batch-delete-image \
              --repository-name "$ECR_REPOSITORY" \
              --region "$AWS_REGION" \
              --image-ids imageDigest="$digest"

            # Check for success or failure
            if [ $? -eq 0 ]; then
              echo "Successfully deleted image with digest: $digest."
            else
              echo "Failed to delete image with digest: $digest."
            fi
          else
            echo "Skipping invalid image digest."
          fi
        done

        echo "Image deletion process complete."
